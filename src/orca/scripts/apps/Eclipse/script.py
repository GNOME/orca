# Orca
#
# Copyright 2010 Informal Informatica LTDA.
# Author: Jose Vilmar <vilmar@informal.com.br>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., Franklin Street, Fifth Floor,
# Boston MA  02110-1301 USA.

"""Custom script for Eclipse."""
__id__        = "$Id$"
__version__   = "$Revision$"
__date__      = "$Date$"
__copyright__ = "Copyright (c) 2010 Informal Informatica LTDA."
__license__   = "LGPL"


from orca import debug
from orca import focus_manager
from orca import input_event_manager
from orca.scripts.toolkits import gtk
from orca.ax_text import AXText
from orca.ax_utilities import AXUtilities

class Script(gtk.Script):

    def _presentTextAtNewCaretPosition(self, event, otherObj=None):
        """Presents text at the new position, based on heuristics. Returns True if handled."""

        if super()._presentTextAtNewCaretPosition(event, otherObj):
            return True

        obj = otherObj or event.source

        # if Tab key is pressed and there is text selected, we must announce
        # the text selected because probably we are in a parameter list
        # and we are jumping between the parameters with the tab key.
        hasSelection = False
        if input_event_manager.getManager().last_event_was_tab_navigation():
            text, startOffset, endOffset = AXText.get_selected_text(obj)
            hasSelection = endOffset > 0

        if hasSelection:
            self.sayPhrase(obj, startOffset, endOffset)
        else:
            self.sayLine(obj)

        self._saveLastTextPosition(obj)
        return True

    def on_focus(self, event):
        """Callback for focus: accessibility events."""

        # NOTE: This event type is deprecated and Orca should no longer use it.
        # This callback remains just to handle bugs in applications and toolkits.
        if AXUtilities.is_panel(event.source):
            focus_manager.getManager().set_locus_of_focus(event, event.source)
            return

        if AXUtilities.is_text(event.source) \
           and input_event_manager.getManager().last_event_was_unmodified_arrow() \
           and self.utilities.inMenu():
            msg = "ECLIPSE: Ignoring event. In menu."
            debug.printMessage(debug.LEVEL_INFO, msg, True)
            return

        super().on_focus(event)

    def on_text_inserted(self, event):
        """Callback for object:text-changed:insert accessibility events."""

        if self.utilities.isTextArea(event.source) \
           and event.detail1 == 0 and event.detail2 == AXText.get_character_count(event.source):
            # seems to be generated by a reformat (ctrl+shift+f)
            # or by commenting some block (ctrl+/).
            # if not discarded, orca will speak all the text of the file.
            return

        super().on_text_inserted(event)
        self._saveLastTextPosition(event.source)

    def on_text_deleted(self, event):
        """Callback for object:text-changed:delete accessibility events."""

        super().on_text_deleted(event)
        self._saveLastTextPosition(event.source)

    def _saveLastTextPosition(self, obj):
        if self.utilities.isTextArea(obj):
            self._saveLastCursorPosition(obj, AXText.get_caret_offset(obj))

    def on_selection_changed(self, event):
        """Callback for object:selection-changed accessibility events."""

        # Sometimes Eclipse fires an object:selection-changed event for non-focused
        # containers. We don't want to present those. The exception is the MenuBar.
        if not (AXUtilities.is_focused(event.source) or AXUtilities.is_menu_bar(event.source)):
            return

        super().on_selection_changed(event)

